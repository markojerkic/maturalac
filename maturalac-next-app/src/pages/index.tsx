import type { GetServerSidePropsContext, InferGetStaticPropsType } from "next";
import Head from "next/head";
import Link from "next/link";
import { createSSGContext } from "../server/trpc/context";
import { trpc } from "../utils/trpc";

const SubjectExamTree: React.FC<{
  subjectName: string;
  exams: { year: string; subjectExamYearId: string }[];
}> = ({ subjectName, exams }) => {
  return (
    <div className="my-2 flex flex-col justify-center rounded-md border border-solid border-white p-2">
      <div className="mb-2 text-center text-lg">{subjectName}</div>
      <div className="mx-auto flex flex-col justify-center">
        {exams.map(({ year, subjectExamYearId }) => (
          <>
            <span key={`${subjectName}-${year}`}>
              |-&gt;
              <Link href={`/exam/${subjectExamYearId}`}>{year}</Link>
            </span>
          </>
        ))}
      </div>
    </div>
  );
};

const getStaticProps = async (ctx: GetServerSidePropsContext) => {
  const ssg = await createSSGContext(ctx);
  await ssg.exam.getPublicExamsTree.fetch();
  return {
    props: {
      trpcState: ssg.dehydrate(),
    },
    revalidate: 1,
  };
};

const Home = (props: InferGetStaticPropsType<typeof getStaticProps>) => {
  const { data, isLoading } = trpc.exam.getPublicExamsTree.useQuery();

  if (!data || isLoading) {
    return <div>Loading...</div>;
  }

  return (
    <>
      <Head>
        <title>Maturalac Next.js App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.png" />
      </Head>

      <main>
        <>
          <div>Javni ispiti</div>
          {data.map((subj) => (
            <SubjectExamTree
              key={subj.name}
              subjectName={subj.name}
              exams={subj.examYears.map((ey) => ({
                year: ey.examYear.year,
                subjectExamYearId: ey.id,
              }))}
            />
          ))}
        </>
      </main>
    </>
  );
};

export default Home;
