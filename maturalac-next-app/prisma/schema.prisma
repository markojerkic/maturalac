// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_URL")
  referentialIntegrity = "prisma"
}

model Subject {
  id        String            @id @default(cuid())
  name      String
  examYears SubjectExamYear[]
}

model ExamYear {
  id       String            @id @default(cuid())
  year     Int
  subjects SubjectExamYear[]
}

model SubjectExamYear {
  id         String     @id @default(cuid())
  subjectId  String
  subject    Subject    @relation(fields: [subjectId], references: [id])
  examYearId String
  examYear   ExamYear   @relation(fields: [examYearId], references: [id])
  question   Question[]
  isPublic   Boolean
}

enum AnswerType {
  ABCD
  FILL_IN
  LONG
}

enum CorrectAnswer {
  A
  B
  C
  D
}

model SuperQuestion {
  id       String  @id @default(cuid())
  question String
  imageId  String?
  audioId  String?
}

model Question {
  id                String          @id @default(cuid())
  subjectExamYearId String
  subjectExamYear   SubjectExamYear @relation(fields: [subjectExamYearId], references: [id])
  question          String
  answerType        AnswerType
  correctAnswer     CorrectAnswer?
  questionNumber    Int
  questionImageId   String?
  answerImageId     String?
  ansA              String?
  ansB              String?
  ansC              String?
  ansD              String?
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
